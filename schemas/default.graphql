# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
  query: Query
  mutation: Mutation
}

"Интерфейс ошибок, отображаемых пользователю."
interface ErrorInterface {
  "Код ошибки, соответствующий человекочитаемому сообщению об ошибке"
  code: ErrorCodesEnum!
  details: String
  "Сообщение об ошибке. Отображается в случае отсутствия соответствующего коду человекочитаемого сообщения на клиенте"
  message: String!
  payload: DictType
}

union AttendeeListOrError = AttendeeList | DuplicateRoleError | Error | UpdateProjectDiff

union AttendeeTypeOrError = Attendee | Error | UpdateProjectDiff

union ProjectDiffOrError = Error | Project | UpdateProjectDiff | ValidationError

union ProjectListOrError = Error | ProjectList

union ProjectOrError = Error | Project | ValidationError

union UuidOrError = Error | Result

type Activity {
  category: ActivityLibraryCategory
  code: String
  createdAt: DateTime
  description: String
  editedAt: DateTime
  isDeleted: Boolean
  name: String
  title: String
  vid: ID
}

type ActivityLibraryCategory {
  code: String
  isDeleted: Boolean
  name: String
  parent: ActivityLibraryCategory
  vid: ID
}

type AddAttendees {
  result: AttendeeListOrError
}

type Assembly {
  category: AssemblyLibraryCategory
  code: String
  createdAt: DateTime
  description: String
  editedAt: DateTime
  isDeleted: Boolean
  name: String
  title: String
  vid: ID
}

type AssemblyLibraryCategory {
  code: String
  isDeleted: Boolean
  name: String
  parent: AssemblyLibraryCategory
  vid: ID
}

type Attachment {
  category: AttachmentType
  code: String
  comment: String
  contentType: String
  createdAt: DateTime
  createdBy: User
  editedAt: DateTime
  editedBy: User
  extension: String
  isDeleted: Boolean
  name: String
  projectId: ID
  size: Int
  status: Int
  uri: String
  vid: ID
}

type AttachmentType {
  code: String
  createdAt: DateTime
  editedAt: DateTime
  isDeleted: Boolean
  name: String
  vid: ID
}

type Attendee {
  roles: [ProjectRole]
  status: AttendeeStatus
  user: User
}

type AttendeeList {
  attendeeList: [Attendee]
}

type Component {
  category: ComponentLibraryCategory
  code: String
  createdAt: DateTime
  description: String
  editedAt: DateTime
  isDeleted: Boolean
  name: String
  title: String
  vid: ID
}

type ComponentLibraryCategory {
  code: String
  isDeleted: Boolean
  name: String
  parent: ComponentLibraryCategory
  vid: ID
}

type Country {
  code: String
  coordinateSystems: [String]
  createdAt: DateTime
  editedAt: DateTime
  isDeleted: Boolean
  name: String
  vid: ID
}

type CreateActivity {
  result: Activity
}

type CreateActivityCategories {
  result: ActivityLibraryCategory
}

type CreateAssembly {
  result: Assembly
}

type CreateAssemblyCategories {
  result: AssemblyLibraryCategory
}

type CreateAttachment {
  result: Attachment
}

type CreateAttachmentType {
  result: AttachmentType
}

type CreateComponent {
  result: Component
}

type CreateComponentCategories {
  result: ComponentLibraryCategory
}

type CreateCountry {
  result: Country
}

type CreateDomainEntity {
  result: DomainEntity
}

type CreateDomainTemplate {
  result: DomainTemplate
}

type CreateDomainTemplateCategories {
  result: DomainTemplateLibraryCategory
}

type CreateJtiBlackListEntry {
  result: JtiBlackListEntry
}

type CreateOrganization {
  result: Organization
}

type CreateOrganizationUnit {
  result: OrganizationUnit
}

type CreateProject {
  result: ProjectOrError
}

type CreateProjectLibrary {
  result: ProjectLibrary
}

type CreateProjectLibraryCategories {
  result: ProjectLibraryCategory
}

type CreateProjectRole {
  result: ProjectRole
}

type CreateRegion {
  result: Region
}

type CreateUser {
  result: User
}

type CreateUserGroup {
  result: UserGroup
}

type DeleteActivity {
  result: Boolean
}

type DeleteActivityCategories {
  result: Boolean
}

type DeleteAssembly {
  result: Boolean
}

type DeleteAssemblyCategories {
  result: Boolean
}

type DeleteAttachment {
  result: Boolean
}

type DeleteAttachmentType {
  result: Boolean
}

type DeleteComponent {
  result: Boolean
}

type DeleteComponentCategories {
  result: Boolean
}

type DeleteCountry {
  result: Boolean
}

type DeleteDomainEntity {
  result: Boolean
}

type DeleteDomainTemplate {
  result: Boolean
}

type DeleteDomainTemplateCategories {
  result: Boolean
}

type DeleteJtiBlackListEntry {
  result: Boolean
}

type DeleteOrganization {
  result: Boolean
}

type DeleteOrganizationUnit {
  result: Boolean
}

type DeleteProject {
  result: UuidOrError
}

type DeleteProjectLibrary {
  result: Boolean
}

type DeleteProjectLibraryCategories {
  result: Boolean
}

type DeleteProjectRole {
  result: Boolean
}

type DeleteRegion {
  result: Boolean
}

type DeleteUser {
  result: Boolean
}

type DeleteUserGroup {
  result: Boolean
}

type DomainEntity {
  code: String
  createdAt: DateTime
  editedAt: DateTime
  isDeleted: Boolean
  name: String
  vid: ID
}

type DomainEntityImage {
  attributes: [PropertyMeta]
  code: String
  description: String
  entity: DomainEntity
  name: String
  title: String
  vid: ID
}

type DomainSchema {
  entityImages: [DomainEntityImage]
  version: String
}

type DomainTemplate {
  attributes: [PropertyMeta]
  category: DomainTemplateLibraryCategory
  code: String
  createdAt: DateTime
  description: String
  editedAt: DateTime
  entity: DomainEntity
  isDeleted: Boolean
  name: String
  title: String
  vid: ID
}

type DomainTemplateLibraryCategory {
  code: String
  isDeleted: Boolean
  name: String
  parent: DomainTemplateLibraryCategory
  vid: ID
}

type DuplicateRoleError implements ErrorInterface {
  "Код ошибки, соответствующий человекочитаемому сообщению об ошибке"
  code: ErrorCodesEnum!
  details: String
  "Сообщение об ошибке. Отображается в случае отсутствия соответствующего коду человекочитаемого сообщения на клиенте"
  message: String!
  payload: DictType
  roles: [UUID]
}

"Common error-object class."
type Error implements ErrorInterface {
  "Код ошибки, соответствующий человекочитаемому сообщению об ошибке"
  code: ErrorCodesEnum!
  details: String
  "Сообщение об ошибке. Отображается в случае отсутствия соответствующего коду человекочитаемого сообщения на клиенте"
  message: String!
  payload: DictType
}

type JtiBlackListEntry {
  code: String
  createdAt: DateTime
  editedAt: DateTime
  exp: Int
  isDeleted: Boolean
  jti: String
  name: String
  vid: ID
}

type Mutation {
  addAttendeeRole(projectId: UUID!, role: UUID!, user: UUID!, version: Int!): AttendeeTypeOrError
  addAttendees(
    attendees: [AttendeeInputType]!,
    projectId: UUID!,
    "Version of the original project."
    version: Int!
  ): AddAttendees
  createActivity(category: UUID, code: String, description: String, name: String, title: String): CreateActivity
  createActivityCategories(code: String, name: String, parent: UUID): CreateActivityCategories
  createAssembly(category: UUID, code: String, description: String, name: String, title: String): CreateAssembly
  createAssemblyCategories(code: String, name: String, parent: UUID): CreateAssemblyCategories
  createAttachment(category: UUID, code: String, comment: String, contentType: String, name: String, projectId: ID, status: Int): CreateAttachment
  createAttachmentType(code: String, name: String): CreateAttachmentType
  createComponent(category: UUID, code: String, description: String, name: String, title: String): CreateComponent
  createComponentCategories(code: String, name: String, parent: UUID): CreateComponentCategories
  createCountry(code: String, coordinateSystems: [String], name: String): CreateCountry
  createDomainEntity(code: String, name: String): CreateDomainEntity
  createDomainTemplate(attributes: [PropertyMetaInputType], category: UUID, code: String, description: String, entity: UUID, name: String, title: String): CreateDomainTemplate
  createDomainTemplateCategories(code: String, name: String, parent: UUID): CreateDomainTemplateCategories
  createJtiBlackListEntry(code: String, exp: Int, jti: String, name: String): CreateJtiBlackListEntry
  createOrganization(code: String, name: String): CreateOrganization
  createOrganizationUnit(adId: String, code: String, name: String, organization: UUID, parentOu: UUID): CreateOrganizationUnit
  createProject(data: ProjectInputType): CreateProject
  createProjectLibrary(category: UUID, code: String, description: String, name: String, title: String): CreateProjectLibrary
  createProjectLibraryCategories(code: String, name: String, parent: UUID): CreateProjectLibraryCategories
  createProjectRole(code: String, defaultAttachmentType: UUID, name: String): CreateProjectRole
  createRegion(code: String, country: UUID, fullName: String, name: String): CreateRegion
  createUser(adId: String, code: String, customSettings: UserCustomSettingsInputType, favoriteProjects: [ID], firstName: String, groups: [UUID], lastName: String, login: String, name: String, organizationUnits: [UUID], patronym: String, role: String): CreateUser
  createUserGroup(code: String, name: String, project: ID): CreateUserGroup
  deleteActivity(vid: UUID!): DeleteActivity
  deleteActivityCategories(vid: UUID!): DeleteActivityCategories
  deleteAssembly(vid: UUID!): DeleteAssembly
  deleteAssemblyCategories(vid: UUID!): DeleteAssemblyCategories
  deleteAttachment(vid: UUID!): DeleteAttachment
  deleteAttachmentType(vid: UUID!): DeleteAttachmentType
  deleteComponent(vid: UUID!): DeleteComponent
  deleteComponentCategories(vid: UUID!): DeleteComponentCategories
  deleteCountry(vid: UUID!): DeleteCountry
  deleteDomainEntity(vid: UUID!): DeleteDomainEntity
  deleteDomainTemplate(vid: UUID!): DeleteDomainTemplate
  deleteDomainTemplateCategories(vid: UUID!): DeleteDomainTemplateCategories
  deleteJtiBlackListEntry(vid: UUID!): DeleteJtiBlackListEntry
  deleteOrganization(vid: UUID!): DeleteOrganization
  deleteOrganizationUnit(vid: UUID!): DeleteOrganizationUnit
  deleteProject(vid: UUID): DeleteProject
  deleteProjectLibrary(vid: UUID!): DeleteProjectLibrary
  deleteProjectLibraryCategories(vid: UUID!): DeleteProjectLibraryCategories
  deleteProjectRole(vid: UUID!): DeleteProjectRole
  deleteRegion(vid: UUID!): DeleteRegion
  deleteUser(vid: UUID!): DeleteUser
  deleteUserGroup(vid: UUID!): DeleteUserGroup
  removeAttendeeRole(projectId: UUID!, role: UUID!, user: UUID!, version: Int!): AttendeeTypeOrError
  removeAttendees(
    attendees: [UUID]!,
    projectId: UUID!,
    "Version of the original project."
    version: Int!
  ): RemoveAttendees
  setFavoriteProject(isFavorite: Boolean!, projectId: UUID!): ProjectOrError
  updateActivity(category: UUID, code: String, description: String, name: String, title: String, vid: UUID!): UpdateActivity
  updateActivityCategories(code: String, name: String, parent: UUID, vid: UUID!): UpdateActivityCategories
  updateAssembly(category: UUID, code: String, description: String, name: String, title: String, vid: UUID!): UpdateAssembly
  updateAssemblyCategories(code: String, name: String, parent: UUID, vid: UUID!): UpdateAssemblyCategories
  updateAttachment(category: UUID, code: String, comment: String, contentType: String, name: String, projectId: ID, status: Int, vid: UUID!): UpdateAttachment
  updateAttachmentType(code: String, name: String, vid: UUID!): UpdateAttachmentType
  updateComponent(category: UUID, code: String, description: String, name: String, title: String, vid: UUID!): UpdateComponent
  updateComponentCategories(code: String, name: String, parent: UUID, vid: UUID!): UpdateComponentCategories
  updateCountry(code: String, coordinateSystems: [String], name: String, vid: UUID!): UpdateCountry
  updateDomainEntity(code: String, name: String, vid: UUID!): UpdateDomainEntity
  updateDomainTemplate(attributes: [PropertyMetaInputType], category: UUID, code: String, description: String, entity: UUID, name: String, title: String, vid: UUID!): UpdateDomainTemplate
  updateDomainTemplateCategories(code: String, name: String, parent: UUID, vid: UUID!): UpdateDomainTemplateCategories
  updateJtiBlackListEntry(code: String, exp: Int, jti: String, name: String, vid: UUID!): UpdateJtiBlackListEntry
  updateOrganization(code: String, name: String, vid: UUID!): UpdateOrganization
  updateOrganizationUnit(adId: String, code: String, name: String, organization: UUID, parentOu: UUID, vid: UUID!): UpdateOrganizationUnit
  updateProject(data: ProjectUpdateType, vid: UUID): UpdateProject
  updateProjectLibrary(category: UUID, code: String, description: String, name: String, title: String, vid: UUID!): UpdateProjectLibrary
  updateProjectLibraryCategories(code: String, name: String, parent: UUID, vid: UUID!): UpdateProjectLibraryCategories
  updateProjectRole(code: String, defaultAttachmentType: UUID, name: String, vid: UUID!): UpdateProjectRole
  updateProjectStatus(data: ProjectStatusUpdateType, vid: UUID!): UpdateProjectStatus
  updateRegion(code: String, country: UUID, fullName: String, name: String, vid: UUID!): UpdateRegion
  updateUser(adId: String, code: String, customSettings: UserCustomSettingsInputType, favoriteProjects: [ID], firstName: String, groups: [UUID], lastName: String, login: String, name: String, organizationUnits: [UUID], patronym: String, role: String, vid: UUID!): UpdateUser
  updateUserGroup(code: String, name: String, project: ID, vid: UUID!): UpdateUserGroup
}

type Organization {
  code: String
  createdAt: DateTime
  editedAt: DateTime
  isDeleted: Boolean
  name: String
  vid: ID
}

type OrganizationUnit {
  adId: String
  code: String
  createdAt: DateTime
  editedAt: DateTime
  isDeleted: Boolean
  name: String
  organization: Organization
  parentOu: OrganizationUnit
  vid: ID
}

type Project {
  adId: String
  attendees(orderBy: [AttendeeOrderBy] = [NAME], sortBy: SortType = ASC): [Attendee]
  attendeesTotal: Int
  authorOu: OrganizationUnit
  code: String
  coordinateSystem: String
  coordinates: String
  createdAt: DateTime
  createdBy: User
  description: String
  domainSchema: DomainSchema
  editedAt: DateTime
  editedBy: User
  files: [Attachment]
  filesTotal: Int
  isDeleted: Boolean
  isFavorite: Boolean
  myRoles: [ProjectRole]
  name: String
  recentlyEdited: Boolean!
  region: Region
  resourceId: String
  rootEntity: String
  status: ProjectStatusEnum
  type: ProjectTypeEnum
  version: Int
  versions: [Int]!
  vid: ID
}

type ProjectLibrary {
  category: ProjectLibraryCategory
  code: String
  createdAt: DateTime
  description: String
  editedAt: DateTime
  isDeleted: Boolean
  name: String
  title: String
  vid: ID
}

type ProjectLibraryCategory {
  code: String
  isDeleted: Boolean
  name: String
  parent: ProjectLibraryCategory
  vid: ID
}

type ProjectList {
  itemsTotal: Int
  projectList: [Project]
}

type ProjectListSortingSetting {
  orderBy: ProjectOrderByEnum
  sortBy: SortTypeEnum
}

type ProjectRole {
  code: String
  createdAt: DateTime
  defaultAttachmentType: AttachmentType
  editedAt: DateTime
  isDeleted: Boolean
  name: String
  vid: ID
}

"""

Model to description object attributes.

Model attributes:
title - civil attribute name by user native language
name - technical attribute name
attr_type - attributes data type, must be mapped to marshmellow types,
example: Str, Int, RefLink('Model')
unit - Attributes unit, example: km^2, m^3
validation_rules - Rules for validation object attribute value
"""
type PropertyMeta {
  attrType: String
  description: String
  entity: DomainEntity
  name: String
  required: Boolean
  title: String
  unit: String
  validationRules: ValidationRules
}

type Query {
  activity(vid: UUID): Activity
  activityCategories(vid: UUID): ActivityLibraryCategory
  activityCategoriesList: [ActivityLibraryCategory]
  activityList: [Activity]
  assembly(vid: UUID): Assembly
  assemblyCategories(vid: UUID): AssemblyLibraryCategory
  assemblyCategoriesList: [AssemblyLibraryCategory]
  assemblyList: [Assembly]
  attachment(vid: UUID): Attachment
  attachmentList: [Attachment]
  attachmentType(vid: UUID): AttachmentType
  attachmentTypeList: [AttachmentType]
  component(vid: UUID): Component
  componentCategories(vid: UUID): ComponentLibraryCategory
  componentCategoriesList: [ComponentLibraryCategory]
  componentList: [Component]
  country(vid: UUID): Country
  countryList: [Country]
  domainEntity(vid: UUID): DomainEntity
  domainEntityList: [DomainEntity]
  domainTemplate(vid: UUID): DomainTemplate
  domainTemplateCategories(vid: UUID): DomainTemplateLibraryCategory
  domainTemplateCategoriesList: [DomainTemplateLibraryCategory]
  domainTemplatelist: [DomainTemplate]
  jtiBlackListEntry(vid: UUID): JtiBlackListEntry
  jtiBlackListEntryList: [JtiBlackListEntry]
  me: User
  organization(vid: UUID): Organization
  organizationList: [Organization]
  organizationUnit(vid: UUID): OrganizationUnit
  organizationUnitList: [OrganizationUnit]
  project(version: Int, vid: UUID): ProjectOrError
  projectLibrary(vid: UUID): ProjectLibrary
  projectLibraryCategories(vid: UUID): ProjectLibraryCategory
  projectLibraryCategoriesList: [ProjectLibraryCategory]
  projectLibrarylist: [ProjectLibrary]
  projectList(includeBlank: Boolean = false, orderBy: ProjectOrderByEnum, pageNumber: Int = 1, pageSize: Int = 20, sortBy: SortType, useWhole: Boolean = false): ProjectListOrError
  projectRole(vid: UUID): ProjectRole
  projectRoleList: [ProjectRole]
  region(vid: UUID): Region
  regionList: [Region]
  user(vid: UUID): User
  userGroup(vid: UUID): UserGroup
  userGroupList: [UserGroup]
  userList: [User]
}

type Region {
  code: String
  country: Country
  createdAt: DateTime
  editedAt: DateTime
  fullName: String
  isDeleted: Boolean
  name: String
  vid: ID
}

type RemoveAttendees {
  result: AttendeeListOrError
}

type Result {
  vid: UUID
}

type UpdateActivity {
  result: Activity
}

type UpdateActivityCategories {
  result: ActivityLibraryCategory
}

type UpdateAssembly {
  result: Assembly
}

type UpdateAssemblyCategories {
  result: AssemblyLibraryCategory
}

type UpdateAttachment {
  result: Attachment
}

type UpdateAttachmentType {
  result: AttachmentType
}

type UpdateComponent {
  result: Component
}

type UpdateComponentCategories {
  result: ComponentLibraryCategory
}

type UpdateCountry {
  result: Country
}

type UpdateDomainEntity {
  result: DomainEntity
}

type UpdateDomainTemplate {
  result: DomainTemplate
}

type UpdateDomainTemplateCategories {
  result: DomainTemplateLibraryCategory
}

type UpdateJtiBlackListEntry {
  result: JtiBlackListEntry
}

type UpdateOrganization {
  result: Organization
}

type UpdateOrganizationUnit {
  result: OrganizationUnit
}

type UpdateProject {
  result: ProjectDiffOrError
}

"Contains remote and local versions of  project if versions are not equal."
type UpdateProjectDiff {
  message: String
  remoteProject: Project
}

type UpdateProjectLibrary {
  result: ProjectLibrary
}

type UpdateProjectLibraryCategories {
  result: ProjectLibraryCategory
}

type UpdateProjectRole {
  result: ProjectRole
}

type UpdateProjectStatus {
  result: ProjectDiffOrError
}

type UpdateRegion {
  result: Region
}

type UpdateUser {
  result: User
}

type UpdateUserGroup {
  result: UserGroup
}

type User {
  adId: String
  code: String
  createdAt: DateTime
  customSettings: UserCustomSettings
  editedAt: DateTime
  favoriteProjects: [ID]
  firstName: String
  groups: [UserGroup]
  isDeleted: Boolean
  lastName: String
  login: String
  name: String
  organizationUnits: [OrganizationUnit]
  patronym: String
  role: String
  vid: ID
}

type UserCustomSettings {
  projectList: ProjectListSortingSetting
}

type UserGroup {
  code: String
  createdAt: DateTime
  editedAt: DateTime
  isDeleted: Boolean
  name: String
  project: ID
  vid: ID
}

type ValidationError implements ErrorInterface {
  "Код ошибки, соответствующий человекочитаемому сообщению об ошибке"
  code: ErrorCodesEnum!
  details: String
  "Массив ошибок валидации для отправленных полей мутации"
  items: [ValidationErrorItemType]
  "Сообщение об ошибке. Отображается в случае отсутствия соответствующего коду человекочитаемого сообщения на клиенте"
  message: String!
  payload: DictType
}

type ValidationErrorItemType {
  "Код ошибки, соответствующий человекочитаемому сообщению об ошибке"
  code: ValidationErrorCode!
  "Сообщение об ошибке валидации. Отображается в случае отсутствия соответствующего коду человекочитаемого сообщения на клиенте"
  message: String!
  path: [String]
}

"""

Validation Rules.

Todo:
1. Develop valudation rule syntax
2. Realize validate value by valudation rules
"""
type ValidationRules {
  rules: [String]
}

enum AttendeeOrderBy {
  FIRST_NAME
  LAST_NAME
  NAME
  PATRONYM
  ROLE
}

enum AttendeeStatus {
  ACTIVE
  INACTIVE
}

"Error codes list."
enum ErrorCodesEnum {
  "Проект нельзя возвращать в статус заготовки."
  CANNOT_BRING_BLANK_BACK
  "Отсутствует роль"
  EMPTY_ATTENDEE_ROLE
  "Ошибка"
  ERROR
  "Некорректная версия проекта"
  INCORRECT_PROJECT_VERSION
  "Некорректный формат UUID"
  INCORRECT_UUID
  "Неверный номер страницы"
  INVALID_PAGE_NUMBER
  "Неверный размер страницы"
  INVALID_PAGE_SIZE
  "Удаляемый участник не найден в проекте "
  NO_ATTENDEE_TO_REMOVE
  "Пользователь не обладает правами для совершения операции"
  NO_RIGHTS
  "Объект не найден"
  OBJECT_NOT_FOUND
  "Участник проекта уже обладет данной ролью"
  PROJECT_ATTENDEE_ALREADY_HAS_ROLE
  "Участник проекта не найден"
  PROJECT_ATTENDEE_NOT_FOUND
  "Рольу участника проекта не найдена"
  PROJECT_ATTENDEE_USER_ROLE_NOT_FOUND
  "Невозможно добавить участника с дублирующимися ролями."
  PROJECT_ATTENDEE_USER_WITH_DUPLICATE_ROLES
  "Невозможно сохранить проект - не найден менеджер проекта"
  PROJECT_MANAGER_NOT_FOUND
  "Проект с таким именем уже существует"
  PROJECT_NAME_ALREADY_EXISTS
  "Проект не найден"
  PROJECT_NOT_FOUND
  "Ошибка при обновлении проекта"
  PROJECT_UPDATE_ERROR
  "Расхождение версий проекта"
  PROJECT_VERSION_DIFF_ERROR
  "Объект справочника не найден"
  REFERENCE_ITEM_NOT_FOUND
  "Ошибка валидации"
  VALIDATION
}

"An enumeration."
enum ProjectOrderByEnum {
  CREATED_AT
  CREATED_BY
  DESCRIPTION
  EDITED_AT
  EDITED_BY
  IS_FAVORITE
  NAME
  REGION
}

"An enumeration."
enum ProjectStatusEnum {
  BLANK
  UNPUBLISHED
}

"An enumeration."
enum ProjectTypeEnum {
  GEO
}

enum SortType {
  ASC
  DESC
}

"An enumeration."
enum SortTypeEnum {
  ASC
  DESC
}

"Validation error codes list."
enum ValidationErrorCode {
  "ARRAY_IS_EMPTY"
  ARRAY_IS_EMPTY
  "ARRAY_TOO_LONG"
  ARRAY_TOO_LONG
  "ARRAY_TOO_SHORT"
  ARRAY_TOO_SHORT
  "NOT_UNIQUE"
  NOT_UNIQUE
  "NUMBER_IS_NEGATIVE"
  NUMBER_IS_NEGATIVE
  "NUMBER_TOO_LARGE"
  NUMBER_TOO_LARGE
  "NUMBER_TOO_LOW"
  NUMBER_TOO_LOW
  "OBJECT_KEY_NOT_FOUND"
  OBJECT_KEY_NOT_FOUND
  "STRING_DOES_NOT_MATCH_PATTERN"
  STRING_DOES_NOT_MATCH_PATTERN
  "STRING_TOO_LONG"
  STRING_TOO_LONG
  "STRING_TOO_SHORT"
  STRING_TOO_SHORT
  "VALUE_HAS_WRONG_TYPE"
  VALUE_HAS_WRONG_TYPE
  "VALUE_IS_EMPTY"
  VALUE_IS_EMPTY
  "VALUE_IS_INCORRECT"
  VALUE_IS_INCORRECT
}

input AttendeeInputType {
  roles: [UUID]!
  user: UUID!
}

input ProjectInputType {
  coordinateSystem: String
  coordinates: String
  description: String
  name: String
  region: UUID
  resourceId: String
  type: ProjectTypeEnum = GEO
}

input ProjectListSortingSettingInputType {
  orderBy: ProjectOrderByEnum
  sortBy: SortTypeEnum
}

input ProjectStatusUpdateType {
  status: ProjectStatusEnum!
  "Version of the original project."
  version: Int!
}

input ProjectUpdateType {
  coordinateSystem: String
  coordinates: String
  description: String
  name: String
  region: UUID
  resourceId: String
  status: ProjectStatusEnum
  "Version of the original project."
  version: Int!
}

input PropertyMetaInputType {
  attrType: String
  description: String
  entity: UUID
  name: String
  required: Boolean
  title: String
  unit: String
  validationRules: ValidationRulesInputType
}

input UserCustomSettingsInputType {
  projectList: ProjectListSortingSettingInputType
}

input ValidationRulesInputType {
  rules: [String]
}


"""
The `DateTime` scalar type represents a DateTime
value as specified by
[iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar DateTime

"""
Leverages the internal Python implmeentation of UUID (uuid.UUID) to provide native UUID objects
in fields, resolvers and input.
"""
scalar UUID

scalar DictType
